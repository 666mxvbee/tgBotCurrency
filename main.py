from datetime import datetime, timedelta
import xml.etree.ElementTree as ET

import requests

from aiogram import types, Bot, executor, Dispatcher
from aiogram.dispatcher.filters import Command, Text
from configg import token


CURRENT_DATE = datetime.today()
URL_TODAY = (
    f"http://www.cbr.ru/scripts/XML_daily.asp?date_req="
    f"{CURRENT_DATE.strftime('%d/%m/%Y')}"
)
response = requests.get(URL_TODAY)
tree = ET.fromstring(response.content)
CURRENT_RATES = []
for currency in tree.findall('Valute'):
    name = currency.find('Name').text
    value = currency.find('Value').text
    CURRENT_RATES.append({'Name': name, 'Value': value})

PAST_DATE = datetime.today() - timedelta(days=30)
URL_30_DAYS = (
    f"http://www.cbr.ru/scripts/XML_daily.asp?date_req="
    f"{PAST_DATE.strftime('%d/%m/%Y')}"
)
response1 = requests.get(URL_30_DAYS)
tree1 = ET.fromstring(response1.content)
PAST_RATES = []
for currency in tree1.findall('Valute'):
    name = currency.find('Name').text
    value = currency.find('Value').text
    PAST_RATES.append({'Name': name, 'Value': value})

bot = Bot(token)
dp = Dispatcher(bot)

kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn_currency = types.KeyboardButton('/Currency')
kb.add(btn_currency)


@dp.message_handler(Command('start') | Text(
    equals=[
        '–ø—Ä–∏–≤–µ—Ç', '–ü—Ä–∏–≤–µ—Ç', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ',
        '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–ó–¥–∞—Ä–æ–≤–∞', '–∑–¥–∞—Ä–æ–≤–∞',
        '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–î–æ–±—Ä—ã–π –¥–µ–Ω—å', '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä'
    ]
))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    welcome_text = (
        "<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –î–∞–Ω–Ω—ã–π –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. "
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ—è–≤–∏–≤—à—É—é—Å—è –∫–Ω–æ–ø–∫—É —Ä—è–¥–æ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /description</b>"
    )
    await bot.send_message(
        chat_id=message.chat.id,
        text=welcome_text,
        parse_mode='html',
        reply_markup=kb
    )
    await message.delete()


@dp.message_handler(commands=['description'])
async def descr_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /description. –í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞."""
    description_text = (
        "<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞–º –≤–∞–ª—é—Ç—ã. "
        "(–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∑–∞–Ω–æ–≤–æ, –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Ç–µ—Å—å —Å –Ω–∏–º)</b>"
    )
    await bot.send_message(
        chat_id=message.from_user.id,
        text=description_text,
        parse_mode='html'
    )
    keyboard_inline = types.InlineKeyboardMarkup()
    help_button = types.InlineKeyboardButton(text='–í–∞–ª—é—Ç—ã', callback_data='help_button')
    keyboard_inline.add(help_button)
    await bot.send_message(
        chat_id=message.chat.id,
        text='<b><em>–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç</em></b>',
        parse_mode='html',
        reply_markup=keyboard_inline
    )
    await message.delete()
    await bot.send_message(chat_id=message.chat.id, text='üí∞')


@dp.message_handler(commands=['currency'])
async def currency_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /currency. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã."""
    keyboard_inline = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text='–î–æ–ª–ª–∞—Ä –°–®–ê', callback_data='button1')
    button2 = types.InlineKeyboardButton(text='–ï–≤—Ä–æ', callback_data='button2')
    button3 = types.InlineKeyboardButton(text='–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å', callback_data='button3')
    button4 = types.InlineKeyboardButton(text='–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', callback_data='button4')
    button5 = types.InlineKeyboardButton(text='–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤', callback_data='button5')
    button6 = types.InlineKeyboardButton(text='–î–∏—Ä—Ö–∞–º –û–ê–≠', callback_data='button6')
    button7 = types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='button7')
    keyboard_inline.add(button1, button2)
    keyboard_inline.add(button3, button4)
    keyboard_inline.add(button5, button6)
    keyboard_inline.add(button7)
    await bot.send_message(
        chat_id=message.chat.id,
        text='<b><em>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É</em></b>',
        parse_mode='html',
        reply_markup=keyboard_inline
    )
    await message.delete()


@dp.callback_query_handler(lambda query: query.data == 'help_button')
async def help_button_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–í–∞–ª—é—Ç—ã'. –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã."""
    await bot.answer_callback_query(callback_query.id)
    await currency_handler(callback_query.message)


@dp.callback_query_handler(lambda query: query.data == 'button7')
async def button7_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–π—Ç–∏'. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é."""
    await bot.answer_callback_query(callback_query.id)
    await start_command(callback_query.message)


@dp.callback_query_handler(lambda query: query.data == 'button1')
async def button1_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã '–î–æ–ª–ª–∞—Ä –°–®–ê'."""
    await bot.answer_callback_query(callback_query.id)
    rate_message = (
        f"<b>–ö—É—Ä—Å {CURRENT_RATES[13]['Name']} - {CURRENT_RATES[13]['Value'][:5]} –†—É–±\n"
        f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü:\n"
        f"–ö—É—Ä—Å {PAST_RATES[13]['Name']} - {PAST_RATES[13]['Value'][:5]} –†—É–±</b>"
    )
    await bot.send_message(
        callback_query.from_user.id, rate_message, parse_mode='html'
    )
    current_rate = float(CURRENT_RATES[13]['Value'][:5].replace(",", "."))
    past_rate = float(PAST_RATES[13]['Value'][:5].replace(",", "."))
    if current_rate > past_rate:
        diff = current_rate - past_rate
        percent = (diff / past_rate) * 100
        advice = (
            f"<b>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {str(diff)[:4]} –†—É–± "
            f"({str(percent)[:4]}%)\n–°—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ —Ñ–∏–∫—Å–∞—Ü–∏–µ–π –ø—Ä–∏–±—ã–ª–∏</b>"
        )
    else:
        diff = past_rate - current_rate
        percent = (diff / current_rate) * 100
        advice = (
            f"<b>–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {str(diff)[:4]} –†—É–± "
            f"({str(percent)[:4]}%)\n–°—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ –ø–æ–∫—É–ø–∫–æ–π –≤–∞–ª—é—Ç—ã</b>"
        )
    await bot.send_message(
        callback_query.from_user.id, advice, parse_mode='html'
    )
    await bot.send_message(callback_query.from_user.id, text='üá∫üá∏')
    await currency_handler(callback_query.message)


@dp.callback_query_handler(lambda query: query.data == 'button2')
async def button2_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã '–ï–≤—Ä–æ'."""
    await bot.answer_callback_query(callback_query.id)
    rate_message = (
        f"<b>–ö—É—Ä—Å {CURRENT_RATES[14]['Name']} - {CURRENT_RATES[14]['Value'][:5]} –†—É–±\n"
        f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü:\n"
        f"–ö—É—Ä—Å {PAST_RATES[14]['Name']} - {PAST_RATES[14]['Value'][:5]} –†—É–±</b>"
    )
    await bot.send_message(
        callback_query.from_user.id, rate_message, parse_mode='html'
    )
    current_rate = float(CURRENT_RATES[14]['Value'][:5].replace(",", "."))
    past_rate = float(PAST_RATES[14]['Value'][:5].replace(",", "."))
    if current_rate > past_rate:
        diff = current_rate - past_rate
        percent = (diff / past_rate) * 100
        advice = (
            f"<b>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {str(diff)[:4]} –†—É–± "
            f"({str(percent)[:4]}%)\n–°—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ —Ñ–∏–∫—Å–∞—Ü–∏–µ–π –ø—Ä–∏–±—ã–ª–∏</b>"
        )
    else:
        diff = past_rate - current_rate
        percent = (diff / current_rate) * 100
        advice = (
            f"<b>–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {str(diff)[:4]} –†—É–± "
            f"({str(percent)[:4]}%)\n–°—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ –ø–æ–∫—É–ø–∫–æ–π –≤–∞–ª—é—Ç—ã</b>"
        )
    await bot.send_message(
        callback_query.from_user.id, advice, parse_mode='html'
    )
    await bot.send_message(callback_query.from_user.id, text='üá™üá∫')
    await currency_handler(callback_query.message)


@dp.callback_query_handler(lambda query: query.data == 'button3')
async def button3_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å'."""
    await bot.answer_callback_query(callback_query.id)
    rate_message = (
        f"<b>–ö—É—Ä—Å {CURRENT_RATES[4]['Name']} - {CURRENT_RATES[4]['Value'][:5]} –†—É–±\n"
        f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü:\n"
        f"–ö—É—Ä—Å {PAST_RATES[4]['Name']} - {PAST_RATES[4]['Value'][:5]} –†—É–±</b>"
    )
    await bot.send_message(
        callback_query.from_user.id, rate_message, parse_mode='html'
    )
    current_rate = float(CURRENT_RATES[4]['Value'][:5].replace(",", "."))
    past_rate = float(PAST_RATES[4]['Value'][:5].replace(",", "."))
    if current_rate > past_rate:
        diff = current_rate - past_rate
        percent = (diff / past_rate) * 100
        advice = (
            f"<b>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {str(diff)[:4]} –†—É–± "
            f"({str(percent)[:4]}%)\n–°—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ —Ñ–∏–∫—Å–∞—Ü–∏–µ–π –ø—Ä–∏–±—ã–ª–∏</b>"
        )
    else:
        diff = past_rate - current_rate
        percent = (diff / current_rate) * 100
        advice = (
            f"<b>–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {str(diff)[:4]} –†—É–± "
            f"({str(percent)[:4]}%)\n–°—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ –ø–æ–∫—É–ø–∫–æ–π –≤–∞–ª—é—Ç—ã</b>"
        )
    await bot.send_message(
        callback_query.from_user.id, advice, parse_mode='html'
    )
    await bot.send_message(callback_query.from_user.id, text='üáßüáæ')
    await currency_handler(callback_query.message)


@dp.callback_query_handler(lambda query: query.data == 'button4')
async def button4_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å'."""
    await bot.answer_callback_query(callback_query.id)
    rate_message = (
        f"<b>–ö—É—Ä—Å {CURRENT_RATES[22]['Name']} - {CURRENT_RATES[22]['Value'][:5]} –†—É–±\n"
        f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü:\n"
        f"–ö—É—Ä—Å {PAST_RATES[22]['Name']} - {PAST_RATES[22]['Value'][:5]} –†—É–±</b>"
    )
    await bot.send_message(
        callback_query.from_user.id, rate_message, parse_mode='html'
    )
    current_rate = float(CURRENT_RATES[22]['Value'][:5].replace(",", "."))
    past_rate = float(PAST_RATES[22]['Value'][:5].replace(",", "."))
    if current_rate > past_rate:
        diff = current_rate - past_rate
        percent = (diff / past_rate) * 100
        advice = (
            f"<b>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {str(diff)[:4]} –†—É–± "
            f"({str(percent)[:4]}%)\n–°—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ —Ñ–∏–∫—Å–∞—Ü–∏–µ–π –ø—Ä–∏–±—ã–ª–∏</b>"
        )
    else:
        diff = past_rate - current_rate
        percent = (diff / current_rate) * 100
        advice = (
            f"<b>–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {str(diff)[:4]} –†—É–± "
            f"({str(percent)[:4]}%)\n–°—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ –ø–æ–∫—É–ø–∫–æ–π –≤–∞–ª—é—Ç—ã</b>"
        )
    await bot.send_message(
        callback_query.from_user.id, advice, parse_mode='html'
    )
    await bot.send_message(callback_query.from_user.id, text='üá®üá≥')
    await currency_handler(callback_query.message)


@dp.callback_query_handler(lambda query: query.data == 'button5')
async def button5_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤'."""
    await bot.answer_callback_query(callback_query.id)
    rate_message = (
        f"<b>–ö—É—Ä—Å {CURRENT_RATES[2]['Name']} - {CURRENT_RATES[2]['Value'][:5]} –†—É–±\n"
        f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü:\n"
        f"–ö—É—Ä—Å {PAST_RATES[2]['Name']} - {PAST_RATES[2]['Value'][:5]} –†—É–±</b>"
    )
    await bot.send_message(
        callback_query.from_user.id, rate_message, parse_mode='html'
    )
    current_rate = float(CURRENT_RATES[2]['Value'][:5].replace(",", "."))
    past_rate = float(PAST_RATES[2]['Value'][:5].replace(",", "."))
    if current_rate > past_rate:
        diff = current_rate - past_rate
        percent = (diff / past_rate) * 100
        advice = (
            f"<b>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {str(diff)[:4]} –†—É–± "
            f"({str(percent)[:4]}%)\n–°—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ —Ñ–∏–∫—Å–∞—Ü–∏–µ–π –ø—Ä–∏–±—ã–ª–∏</b>"
        )
    else:
        diff = past_rate - current_rate
        percent = (diff / current_rate) * 100
        advice = (
            f"<b>–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {str(diff)[:4]} –†—É–± "
            f"({str(percent)[:4]}%)\n–°—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ –ø–æ–∫—É–ø–∫–æ–π –≤–∞–ª—é—Ç—ã</b>"
        )
    await bot.send_message(
        callback_query.from_user.id, advice, parse_mode='html'
    )
    await bot.send_message(callback_query.from_user.id, text='üá¨üáß')
    await currency_handler(callback_query.message)


@dp.callback_query_handler(lambda query: query.data == 'button6')
async def button6_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã '–î–∏—Ä—Ö–∞–º –û–ê–≠'."""
    await bot.answer_callback_query(callback_query.id)
    rate_message = (
        f"<b>–ö—É—Ä—Å {CURRENT_RATES[12]['Name']} - {CURRENT_RATES[12]['Value'][:5]} –†—É–±\n"
        f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü:\n"
        f"–ö—É—Ä—Å {PAST_RATES[12]['Name']} - {PAST_RATES[12]['Value'][:5]} –†—É–±</b>"
    )
    await bot.send_message(
        callback_query.from_user.id, rate_message, parse_mode='html'
    )
    current_rate = float(CURRENT_RATES[12]['Value'][:5].replace(",", "."))
    past_rate = float(PAST_RATES[12]['Value'][:5].replace(",", "."))
    if current_rate > past_rate:
        diff = current_rate - past_rate
        percent = (diff / past_rate) * 100
        advice = (
            f"<b>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {str(diff)[:4]} –†—É–± "
            f"({str(percent)[:4]}%)\n–°—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ —Ñ–∏–∫—Å–∞—Ü–∏–µ–π –ø—Ä–∏–±—ã–ª–∏</b>"
        )
    else:
        diff = past_rate - current_rate
        percent = (diff / current_rate) * 100
        advice = (
            f"<b>–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {str(diff)[:4]} –†—É–± "
            f"({str(percent)[:4]}%)\n–°—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ –ø–æ–∫—É–ø–∫–æ–π –≤–∞–ª—é—Ç—ã</b>"
        )
    await bot.send_message(
        callback_query.from_user.id, advice, parse_mode='html'
    )
    await bot.send_message(callback_query.from_user.id, text='üá¶üá™')
    await currency_handler(callback_query.message)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
